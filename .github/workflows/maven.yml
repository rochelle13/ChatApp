# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This is a basic workflow that is manually triggered

name: ChatApp

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # List contents of the root directory
      - name: List contents of root directory
        run: ls -a
        
      # Compile classes to test
      - name: Compile classes
        working-directory: ./ChatApp/src
        run: javac -cp "../lib/junit-platform-console-standalone-1.9.3.jar" ./ChatApp/ChatApp.java ./ ChatApp/Login.java "../test/ChatApp/ChatAppTest.java"

      # List contents of src directory after compile
      - name: List contents of src directory after compile
        working-directory: ./ChatApp/src/ChatApp.java
        run: ls

      # Copy compiled classes to test directory
      - name: Copy compiled classes to testresources directory
        working-directory: ./ChatApp/src/ChatApp.javaE
        run: cp -t "../../tests" ChatApp.class Login.class

      # Copy compiled test classes to testresources directory
      - name: Copy compiled test classes to testresources directory
        working-directory: ./ChatApp/test/ChatApp
        run: cp -t "../../tests" ChatAppTest.class

      # List contents of test package
      - name: List contents of test package
        working-directory: ./ChatApp/test/ChatAppTest
        run: ls

      # Run Login Class tests and output report
      - name: Run Login Class tests and output report
        working-directory: ./ChatApp/test
        run: |
          ls
          cd ..
          java -jar "../lib/junit-platform-console-standalone-1.9.3.jar" --class-path "../src:." --reports-dir ${{github.workspace}}/junit-reports --details=tree --scan-class-path
          
      # Upload the JUnit test results
      - name: Upload JUnit test results
        uses: actions/upload-artifact@v2
        with:
          name: JUnit Test Results
          path: ${{github.workspace}}/junit-reports
